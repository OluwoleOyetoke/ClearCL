buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
	id "com.jfrog.bintray" version "1.2"
	id "us.kirchmeier.capsule" version "1.0.2"
	id "com.diffplug.gradle.spotless" version "3.1.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'findbugs'


//***********************************************************************************
// JAVA CODE BUILDING

sourceSets
{
	main
	{
		java
		{ srcDir 'src/java' }
    resources
		{ srcDir 'src/java' }
	}
	test
	{
		java
		{ srcDir 'src/java' }
    resources
		{ srcDir 'src/java' }
	}
}


sourceCompatibility = 1.8
targetCompatibility = 1.8


test
{
	testLogging.showStandardStreams = true
	testLogging
	{ events "passed", "skipped", "failed" }

	exclude '**/demo/**'
	exclude '**/run/**'

	maxHeapSize = "4G"
}



dependencies
{

	// CoreMem:
	compile ('net.coremem:coremem:0.4.4')  {transitive= true; changing= true}
	
	// JAVACL Backend:
	compile ('com.nativelibs4java:javacl:1.0.0-RC4') {transitive= true; changing= false}
		
	// JOCL backend:
	compile ('org.jocl:jocl:2.0.0') {transitive= true; changing= false}
	
	// Vecmath:
        compile ('javax.vecmath:vecmath:1.5.2')

	// Bioformats
	compile(group: 'ome', name: 'bio-formats-tools', version: '5.5.3')

	// Junit:
	compile group: 'junit', name: 'junit', version: '4.12'
	testCompile group: 'junit', name: 'junit', version: '4.12'
}

repositories
{
	mavenCentral()
	maven { url "http://oss.sonatype.org/content/groups/public" }
	maven { url "http://dl.bintray.com/clearcontrol/ClearControl" }
	maven { url "https://mvnrepository.com/artifact/org.jocl/jocl"}
	maven { url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases" }
	maven { url "http://artifacts.openmicroscopy.org/artifactory/maven/"}
}



task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}






//***********************************************************************************
// BINTRAY PUBLISHING

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
		def stdout = new ByteArrayOutputStream()
		exec {
				commandLine 'git', 'describe', '--tags'
				standardOutput = stdout
		}
		return stdout.toString().trim()
}

group = 'net.clearvolume'

version = getVersionName()


artifacts
{
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			artifact sourcesJar { classifier "sources" }
		}
	}
}

apply from: 'gradle/bintrayUpload.gradle'

//***********************************************************************************
// GIT HOOKS:

apply from: 'gradle/install-git-hooks.gradle'

//***********************************************************************************
// SPOTLESS:

spotless {
    java {
 
        importOrder(['java', 'javax', 'com', 'org'])

        removeUnusedImports() // removes any unused imports

        eclipseFormatFile 'codeformat.eclipse.xml'  
    }
}


//***********************************************************************************
// FINDBUGS:

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}


if (!hasProperty('mainClass')) {
    ext.mainClass = 'clearcl.interview.Runner'
}









